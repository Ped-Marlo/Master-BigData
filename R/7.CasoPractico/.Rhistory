ggplot(data=datos ) +
geom_density(aes(x=V15,fill=binAproved),alpha=0.5)
geom_histogram
ggplot(data=datos ) +
geom_histogram(aes(x=V15,fill=binAproved),alpha=0.5)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
for (var in carac)
{ plot<-ggplot(data=datos ) +
geom_bar(aes_string(x=toString(var),fill=objetivo),position = "dodge")
print(plot)
}
a=datos ) +
geom_h
ggplot(data=datos ) +
geom_histogram(aes(x=V15,fill=binAproved),alpha=0.5)
ggplot(data=datos ) +
geom_histogram(aes(x=V15,fill=binAproved),position = "dodge")
for (num in numeros)
{ plot<-ggplot(data=datos ) +
geom_density(aes_string(x=toString(num),fill=objetivo),position = "dodge")
print(plot)
}
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
ggplot(data=datos ) +
geom_histogram(aes(x=V15,fill=binAproved),position = "dodge",bins=5)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
ggplot(data=datos ) +
geom_histogram(aes(x=V13,fill=binAproved),position = "dodge",bins=5)
ggplot(data=datos ) +
geom_histogram(aes(x=V13,fill=binAproved),position = "dodge",bins=5)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
ggplot(data=datos ) +
geom_histogram(aes(x=V11,fill=binAproved),position = "dodge",bins=5)
ggplot(data=datos ) +
geom_histogram(aes(x=V11,fill=binAproved),position = "dodge",bins=3)
ggplot(data=datos ) +
geom_histogram(aes(x=V11,fill=binAproved),position = "dodge",bins=30)
ggplot(data=datos ) +
geom_histogram(aes(x=V15,fill=binAproved),position = "dodge",bins=30)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
ggplot(data=datos ) +
geom_histogram(aes(x=V15,fill=binAproved),position = "dodge",bins=30)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
library(missForest)
# install.packages("ggplot2")
install.packages("missForest")
library(missForest)
help(missForest)
datosF<-missForest(datosF)
datosF<-missForest(datosF)
datosF<-missForest(datos)
datosF<-missForest(datos,replace = TRUE)
datosF<-missForest(xmis = datos,replace = TRUE)
datosNo<-datos[datos=="?"]<-NA
datos[datos=="?"]<-NA
datos
datos1<-datos[datos=="?"]<-NA
plot<-ggplot(data=datos ) +
geom_bar(aes_string(x=toString(V1),fill=objetivo),position = "dodge")
plot<-ggplot(data=datos ) +
geom_bar(aes(x=V1,fill=binAproved),position = "dodge")
ggplot(data=datos ) +
geom_bar(aes(x=V1,fill=binAproved),position = "dodge")
datosF<-missForest(xmis = datos,replace = TRUE)
datos[datos=="?"]<-NA
datosF<-missForest(xmis = datos,replace = TRUE)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
datos1<-data.frame(datos)
datosF<-missForest(xmis = datos1,replace = TRUE)
datosF<-missForest(xmis = datos1,replace = TRUE,options(stringsAsFactors = FALSE))
datosF<-missForest(xmis = datos1,options(stringsAsFactors = FALSE))
datosF<-missForest(xmis = datos1,options(stringsAsFactors = FALSE),maxiter = 5)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
for (columna in colnames(datos)){
if (class(datos[,columna]=="character")){
for (columna in colnames(datos)){
if (class(datos[,columna]=="character")){
if (class(datos[,columna]=="character")){
datos[,columna]<-factor(datos[,columna])
}
debugSource('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
debugSource('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
debugSource('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
debugSource('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
debugSource('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
debugSource('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
debugSource('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
debugSource('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
debugSource('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
debugSource('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
debugSource('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
debugSource('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
debugSource('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R')
debugSource('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
debugSource('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
for (columna in colnames(datos)){
for (columna in colnames(datos)){
for (columna in colnames(datos)){
for (columna in colnames(datos)){
for (columna in colnames(datos)){
for (var in carac)
{ plot<-ggplot(data=datos ) +
geom_bar(aes_string(x=toString(var),fill=objetivo),position = "dodge")
print(plot)
}
for (num in numeros)
{ plot<-ggplot(data=datos ) +
geom_density(aes_string(x=toString(num),fill=objetivo),alpha=0.5)
geom_histogram(aes_string(x=toString(num),fill=objetivo),alpha=0.5)
print(plot)
}
print(ggplot(data=datos ) +
geom_histogram(aes(x=V15,fill=binAproved),position = "dodge",bins=30))
print(ggplot(data=datos ) +
geom_histogram(aes(x=V11,fill=binAproved),position = "dodge",bins=30))
return(datos)
createDF<- function(file)
{
datos<-read.csv(file,header=FALSE,dec=",")
summary(datos)
str(datos)
datos$binAproved<-mapvalues(datos$V16,from=c('+',"-"), to=c(1,0))
datos$V16<-NULL
#Transform numeric "char" variables to float
datos$V2<-as.double(datos$V2)
datos$V3<-as.double(datos$V3)
datos$V8<-as.double(datos$V8)
datos$V14<-as.integer(datos$V14)
str(datos)
caracteres<- names(datos[, sapply(datos, class) == 'character'])
objetivo<-tail(caracteres,1)
carac<- caracteres[!caracteres %in% objetivo]
continuo<-names(datos[, sapply(datos, class) == 'numeric'])
integ<-names(datos[, sapply(datos, class) == 'integer'])
numeros<-append(continuo,integ)
for (columna in colnames(datos)){
if (class(datos[,columna]=="character")){
datos[,columna]<-factor(datos[,columna])
}
}
for (var in carac)
{ plot<-ggplot(data=datos ) +
geom_bar(aes_string(x=toString(var),fill=objetivo),position = "dodge")
print(plot)
}
for (num in numeros)
{ plot<-ggplot(data=datos ) +
geom_density(aes_string(x=toString(num),fill=objetivo),alpha=0.5)
geom_histogram(aes_string(x=toString(num),fill=objetivo),alpha=0.5)
print(plot)
}
print(ggplot(data=datos ) +
geom_histogram(aes(x=V15,fill=binAproved),position = "dodge",bins=30))
print(ggplot(data=datos ) +
geom_histogram(aes(x=V11,fill=binAproved),position = "dodge",bins=30))
return(datos)
}
help(missForest)
datos<-createDF("CASO_FINAL_crx.data")
datos[datos=="?"]<-NA
datos1<-data.frame(datos)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
datos1<-data.frame(datos)
datos<-createDF("CASO_FINAL_crx.data")
View(datos)
View(datos)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
for (columna in colnames(datos)){
if (class(datos[,columna]=="character")){
datos[,columna]<-factor(datos[,columna])
}
}
datos[,columna]
class(datos[,columna]=="character")
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
datos[,V1]
datos[V1]
datos[,"V1"]
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
datos1<-data.frame(datos)
datosF<-missForest(xmis = datos1,options(stringsAsFactors = FALSE),maxiter = 5)
#Comments on variables based on the difference in aproved/not
datosF<-missForest(xmis = datos,options(stringsAsFactors = FALSE),maxiter = 5)
datosF<-missForest(xmis = datos,options(stringsAsFactors = FALSE),maxiter = 5)
datosF<-missForest(xmis = datos,maxiter = 5)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
View(datosF)
View(datosF)
str(datosF)
str(datosF[0])
str(datosF[1])
datos[datos=="?"]<-NA
datosF<-missForest(xmis = datos,maxiter = 5)
str(datosF[1])
datosF<-missForest(xmis = datos)
View(datosF)
View(datosF)
datosF<-missForest(xmis = datos,replace=TRUE)
View(datosF)
View(datosF)
View(datos)
str(datos)
datosF[["ximp"]][["V2"]]
datosF[["ximp"]][["V1"]]
datosF<-missForest(xmis = datos,replace=FALSE)
View(datosF)
datosF[["ximp"]][["V1"]]
datosF[["ximp"]][["V4"]]
datosF[["ximp"]][["V5"]]
sum(datosF[["ximp"]][["V5"]]==?)
sum(datosF[["ximp"]][["V5"]]=="?")
sum(datosF[["ximp"]][["V5"]]=="g")
sum(datosF[["ximp"]][["V5"]]=="p")
sum(datosF[["ximp"]][["V5"]]=="NA")
sum(datosF[["ximp"]][["V5"]]==NA)
525+163
sum(datosF[["ximp"]][["V5"]])
table(datosF[["ximp"]][["V5"])
table(datosF[["ximp"]][["V5"])
datosF[["ximp"]][["V5"]
datosF[["ximp"]][["V5"]
datosF[["ximp"]][["V5"]
sum(datosF[["ximp"]][["V5"]]=="gg")
sum(datosF[["ximp"]][["V5"]]=="gg")
(datosF[1])
sum(datosF["ximp"]=="?")
sum(datos=="?")
sum(datos=="NA")
sum(datosF=="NA")
count(datosF=="NA")
train<-datosF["ximp"][1:590,]
train<-datosF["ximp"][1:590]
View(train)
train<-datosF["ximp"][,1:590]
train<-datosF["ximp"][,1:590]
train<-datosF["ximp"]
library(dplyr)
train<-select(datosF["ximp"],[,1:150])
train<-datosF["ximp"][1:150,]
train<-datosF["ximp"][c(1:150),]
train<-datosF["ximp"][c(:150),]
train<-datosF["ximp"][,c(1:150)]
train<-datosF["ximp"][1,c(1:150)]
train<-datosF["ximp"][1,c(150)]
train<-datosF["ximp"][c(150)]
train<-datosF["ximp"]
train<-datosF["ximp"][1]
train<-datosF["ximp"][1]
train<-datosF["ximp"][12]
train<-datosF["ximp"][1]
train<-datosF["ximp"][2]
train<-datosF["ximp"][1][1:150,]
train<-datosF["ximp"][1][,1:150]
train<-datosF["ximp"][1]
train<-datosF["ximp"][1][1:150]
train<-datosF["ximp"][1][1:150,]
train<-datosF["ximp"][1][1:150,]
train<-datosF["ximp"][1][1:150]
train<-names(datosF["ximp"][1][1:150])
train<-names(datosF["ximp"][1:150])
[1]
train<-names(datosF[1:150])
train<-datosF[1:150]
View(train)
train<-datosF[1:150]
train<-datosF["ximp" ]
train<-datosF["ximp" ][1]
train<-datosF["ximp" ][1]
train<-select(datosF["ximp" ])
train<-select(datosF["ximp" ][1])
datosF<-as.data.frame(missForest(xmis = datos,replace=FALSE))
train<-as.data.frame(datosF["ximp" ])
train<-as.data.frame(datosF)
train<-as.data.frame(datosF["ximp"])
View(train)
train<-as.data.frame(datosF[1])
train<-datosF[1]
train<-as.data.frame(datosF[1])
train<-as.data.frame(datosF[1])[1:590,]
test<-as.data.frame(datosF[1])[-1:590,]
test<-as.data.frame(datosF[1])[-590:1,]
test<-as.data.frame(datosF[1])[-590,]
test<-as.data.frame(datosF[1])[-(590:1),]
X <- data.matrix(subset(train, select= -binAproved))
X <- data.matrix(subset(train, select= - ximp.binAproved))
y_train<- train$ximp.binAproved
library(glmnet)
install.packages("glmnet")
install.packages("MASS")
cv.ridge <- cv.glmnet(X_train, y_train, family='gaussian', alpha=0, parallel=TRUE, standardize=TRUE, type.measure='mse')
library(glmnet)
cv.ridge <- cv.glmnet(X_train, y_train, family='gaussian', alpha=0, parallel=TRUE, standardize=TRUE, type.measure='mse')
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
library(glmnet)
set.seed(555)
cv.ridge <- cv.glmnet(X_train, y_train, family='gaussian', alpha=0, parallel=TRUE, standardize=TRUE, type.measure='mse')
# Resultados
plot(cv.ridge)
#este es el mejor valor de lambda
cv.ridge$lambda.min
#este es el valor del error que se estima para ese valor lambda mínimo dado en MSE
min(cv.ridge$cvm)
var(y)
library(glmnet)
set.seed(555)
cv.ridge <- cv.glmnet(X_train, y_train, family='gaussian', alpha=0, parallel=TRUE, standardize=TRUE, type.measure='mse')
# Resultados
plot(cv.ridge)
#este es el mejor valor de lambda
cv.ridge$lambda.min
#este es el valor del error que se estima para ese valor lambda mínimo dado en MSE
min(cv.ridge$cvm)
var(y_train
cv.ridge <- cv.glmnet(X_train, y_train, family='gaussian', alpha=0, parallel=TRUE, standardize=TRUE, type.measure='mse')
cv.ridge <- cv.glmnet(X_train, y_train, family='gaussian', alpha=0, parallel=TRUE, standardize=TRUE, type.measure='mse')
set.seed(555)
cv.ridge <- cv.glmnet(X_train, y_train, family='gaussian', alpha=0, parallel=TRUE, standardize=TRUE, type.measure='mse')
# Resultados
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
install.packages("MASS")
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
help(MAss)
help(MASS)
var(y_train)
min(cv.ridge$cvm)
# Resultados
plot(cv.ridge)
min(cv.ridge$cvm)
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
###Lasso
cv.lasso <- cv.glmnet(X_train, y_train, family='binomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='mse')
# Resultados
plot(cv.ridge)
#este es el mejor valor de lambda
cv.lasso$lambda.min
#este es el valor del error que se estima para ese valor lambda mínimo dado en MSE
min(cv.lasso$cvm)
coef(cv.ridge, s=cv.ridge$lambda.min)
###Lasso
cv.lasso <- cv.glmnet(X_train, y_train, family='binomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='mse')
# Resultados
plot(cv.lasso)
#este es el mejor valor de lambda
cv.lasso$lambda.min
#este es el valor del error que se estima para ese valor lambda mínimo dado en MSE
min(cv.lasso$cvm)
coefs.lasso<-coef(cv.lasso, s=cv.ridge$lambda.min)
predict.glmnet(cv.ridge$glmnet.fit, newx=X_test, s=cv.ridge$lambda.min)
set.seed(555)
###Ridge
cv.ridge <- cv.glmnet(X_train, y_train, family='binomial', alpha=0, parallel=TRUE, standardize=TRUE, type.measure='mse')
# Resultados
plot(cv.ridge)
#este es el mejor valor de lambda
cv.ridge$lambda.min
#este es el valor del error que se estima para ese valor lambda mínimo dado en MSE
min(cv.ridge$cvm)
coefs.Ridge<-coef(cv.ridge, s=cv.ridge$lambda.min)
y_pred_R
set.seed(555)
###Ridge
cv.ridge <- cv.glmnet(X_train, y_train, family='binomial', alpha=0, parallel=TRUE, standardize=TRUE, type.measure='mse')
# Resultados
plot(cv.ridge)
#este es el mejor valor de lambda
cv.ridge$lambda.min
#este es el valor del error que se estima para ese valor lambda mínimo dado en MSE
min(cv.ridge$cvm)
coefs.Ridge<-coef(cv.ridge, s=cv.ridge$lambda.min)
y_pred_Ridge <- as.numeric(predict.glmnet(cv.ridge$glmnet.fit, newx=X_test, s=cv.ridge$lambda.min)>.5)
confusionMatrix(as.factor(y_test), as.factor(y_pred), mode="everything")
install.packages(c("e1071", "caret", "e1071")
install.packages(c("e1071", "caret", "e1071"))
install.packages(c("e1071", "caret", "e1071"))
confusionMatrix(as.factor(y_test), as.factor(y_pred), mode="everything")
# install.packages(c("e1071", "caret", "e1071"))
library(caret)
library(ggplot2)
library(lattice)
library(e1071)
confusionMatrix(as.factor(y_test), as.factor(y_pred), mode="everything")
confusionMatrix(as.factor(y_test), as.factor(y_pred_Ridge), mode="everything")
confusionMatrix(as.factor(y_test), as.factor(y_pred_lasso), mode="everything")
#este es el mejor valor de lambda
cv.lasso$lambda.min
#este es el valor del error que se estima para ese valor lambda mínimo dado en MSE
min(cv.lasso$cvm)
coefs.lasso<-coef(cv.lasso, s=cv.ridge$lambda.min)
y_pred_lasso <- as.numeric(predict.glmnet(cv.lassso$glmnet.fit, newx=X_test, s=cv.ridge$lambda.min)>.5)
cv.lasso <- cv.glmnet(X_train, y_train, family='binomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='mse')
# Resultados
plot(cv.lasso)
#este es el mejor valor de lambda
cv.lasso$lambda.min
#este es el valor del error que se estima para ese valor lambda mínimo dado en MSE
min(cv.lasso$cvm)
coefs.lasso<-coef(cv.lasso, s=cv.ridge$lambda.min)
y_pred_lasso <- as.numeric(predict.glmnet(cv.lassso$glmnet.fit, newx=X_test, s=cv.ridge$lambda.min)>.5)
y_pred_lasso <- as.numeric(predict.glmnet(cv.lasso$glmnet.fit, newx=X_test, s=cv.ridge$lambda.min)>.5)
confusionMatrix(as.factor(y_test), as.factor(y_pred_lasso), mode="everything")
auc(y_test, y_pred_Ridge)
auc(y_test, y_pred_Ridge)
library(pROC)
auc(y_test, y_pred_Ridge)
auc(y_test, y_pred_lasso)
auc(y_test, y_pred_lasso)
auc(y_test, y_pred_lasso)
cv.ridge <- cv.glmnet(X_train, y_train, family='binomial', alpha=0, parallel=TRUE, standardize=TRUE, type.measure='mse')
# Resultados
plot(cv.ridge)
#este es el mejor valor de lambda
cv.ridge$lambda.min
#este es el valor del error que se estima para ese valor lambda mínimo dado en MSE
min(cv.ridge$cvm)
coefs.Ridge<-coef(cv.ridge, s=cv.ridge$lambda.min)
y_pred_Ridge <- as.numeric(predict.glmnet(cv.ridge$glmnet.fit, newx=X_test, s=cv.ridge$lambda.min)>.5)
confusionMatrix(as.factor(y_test), as.factor(y_pred_Ridge), mode="everything")
auc(y_test, y_pred_Ridge)
print(y_test)
print(y_pred_lasso)
auc(y_test, y_pred_Ridge)
LassoAuc<-auc(y_test, y_pred_lasso)
LassoAuc<-auc(y_test, y_pred_lasso)
exp(coef(cv.ridge))
logs_odds_ratio_L<-exp(coef(cv.lasso))
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
LassoAuc<-auc(y_test, y_pred_lasso)
LassoAuc<-auc(y_test, y_pred_lasso)
LassoAuc<-auc(y_test, y_pred_lasso)
print(LassoAuc)
LassoConfundido<-confusionMatrix(as.factor(y_test), as.factor(y_pred_lasso), mode="everything")
View(LassoConfundido)
print(LassoConfundido)
print(coefs.lasso )
print(LassoAuc)
print(LassoConfundido)
LassoConfundido[0]
LassoConfundido[1]
LassoConfundido[2]
LassoConfundido[2][1]
LassoConfundido[2][1]
LassoConfundido[2][1,1]
LassoConfundido[2][2]
LassoConfundido[2]["Prediction"]
LassoConfundido$table
LassoConfundido$table[1]
LassoConfundido$table[2]
LassoConfundido$table[2\3]
LassoConfundido$table[3]
LassoConfundido$table[4]
LassoConfundido$table[1,4]
LassoConfundido$table[1:4]
LassoConfundido[2][1:3,2]
LassoConfundido[2][c(1,3)]
LassoConfundido[2][c(1,3)]
LassoConfundido[2][c(1)]
LassoConfundido[2][c(2)]
TP<-LassoConfundido[2][4]
FP<-LassoConfundido[2][2]
Earnings<-TP*100-FP*20
View(TP)
View(TP)
LassoConfundido[2][4]
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
TP<-LassoConfundido[1][4]
FP<-LassoConfundido[1][2]
Earnings<-TP*100-FP*20
#Comments on variables based on the difference in aproved/not
# V15 doesn't affect much the output..except when it goes far from 0||Outliers
# V14  almost doesn't have an impact
# v13 v12  almost almost doesn't affect
# V11 has  couple outliers and as it increases affects the output
# v10 has an relative impact
# V9 has a strong impact
# V8 has a strong impact
# V7 & v6 almost does not have an impact
# v5 & v4 & v1 almost not significant and have empty values "?"
# V3 has an impact but not too strong
# V2 almost almost doesn't affect
TP<-LassoConfundido[1][4]
FP<-LassoConfundido[1][2]
Earnings<-TP*100-FP*20
LassoConfundido[1][4]
TP<-LassoConfundido[2][4]
LassoConfundido[2][4]
LassoConfundido[2][1]
LassoConfundido[2][1]
LassoConfundido[2][1]
LassoConfundido[2][1][1]
TP<-LassoConfundido$table[4]
FP<-LassoConfundido$table[2]
Earnings<-TP*100-FP*20
test<-as.data.frame(datosFilled[1])[-(590:1),]
source('~/Desktop/Master BigData/R/7.CasoPractico/Ejercicio.R', echo=TRUE)
